<!DOCTYPE html>
<meta charset="utf-8">

<html>

<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <script src="js/jquery-1.11.3.js"></script>
    <script src="js/d3.min.js"></script>
    <script src="js/jquery.flightindicators.js"></script>
    <link rel="stylesheet" type="text/css" href="css/flightindicators.css" />
    <script src="js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="css/bootstrap.min.css" />
</head>

<body>
    <div>
        <div>
            <span id="attitude"></span>            
            <span id="airspeed"></span>
            <span id="altimeter"></span>
            <span id="variometer"></span>
            <span id="heading"></span>
            <span id="turn_coordinator"></span>

        </div>

    </div>




    <script>

        var settings = {
            off_flag: false,
            size: 180,
            showBox: false,
            showScrews: false
        };
        var ssize = 180;


        var airspeed = $.flightIndicator('#airspeed', 'airspeed', settings);
        var attitude = $.flightIndicator('#attitude', 'attitude', settings);
        var altimeter = $.flightIndicator('#altimeter', 'altimeter', settings);
        var turn_coordinator = $.flightIndicator('#turn_coordinator', 'turn_coordinator', settings);
        var heading = $.flightIndicator('#heading', 'heading', settings);
        var variometer = $.flightIndicator('#variometer', 'variometer', settings);
        /*
        var attitude = $.flightIndicator('#attitude', 'attitude');
        var airspeed = $.flightIndicator('#airspeed', 'airspeed');
        var altimeter = $.flightIndicator('#altimeter', 'altimeter');
        var variometer = $.flightIndicator('#variometer', 'variometer');
        var heading = $.flightIndicator('#heading', 'heading');
        var variometer = $.flightIndicator('#turn_coordinator', 'turn_coordinator', settings);
*/
        var oldRoll = 0
        var oldPitch = 0

        var slip, deg, turn



        /*attitude.toggleBox(false); airspeed.toggleBox(false); altimeter.toggleBox(false); heading.toggleBox(false); variometer.toggleBox(false);


        attitude.resize(ssize);
        attitude.setOffFlag(false);

        airspeed.resize(ssize);
        altimeter.resize(ssize);
        variometer.resize(ssize);
        heading.resize(ssize);*/


        function dammi_quota(msg) {
            altimeter.setAltitude(msg); return "ciao dalla function quota " + msg
        };
        function GetIAS(msg) {
            airspeed.setAirSpeed(msg); return "airspeed=" + msg
        };
        function GetHdg(msg) {
            heading.setHeading(msg); return "heading=" + msg
        };
        function GetPitch(msg) {
            setPitchEmbedd(msg);
        };
        function GetRoll(msg) {
            setRollEmbedd(msg);
        };
        function GetVSI(msg) {
            variometer.setVario(msg); return "VSI=" + msg
        };

        function GetSlip(msg) {

           
            setSlipEmbedd(msg);

        }

        function GetTurn(msg) {

            setTurnEmbedd(msg);

        }



        function setRollEmbedd(roll) {

            if (oldRoll < roll) {

                var i = oldRoll

                const myFirstInterval = setInterval(function () {
                    attitude.setRoll(i)
                    i++
                    if (i >= roll) {
                        clearInterval(myFirstInterval)
                    }

                }, 5)


                oldRoll = roll;
            }
            else if (oldRoll == roll) {
                oldRoll = roll;
            }
            else {

                var i = oldRoll

                const mySecondInterval = setInterval(function () {
                    attitude.setRoll(i)
                    i--
                    if (i <= roll) {
                        clearInterval(mySecondInterval)
                    }

                }, 1)

                oldRoll = roll;

            }


        }


        function setPitchEmbedd(pitch) {



            if (oldPitch < pitch) {

                var i = oldPitch

                const myFirstInterval = setInterval(function () {
                    attitude.setPitch(i)
                    i++
                    if (i >= pitch) {
                        clearInterval(myFirstInterval)
                    }

                }, 5)


                oldPitch = pitch;
            }
            else if (oldPitch == pitch) {
                oldPitch = pitch;
            }
            else {

                var i = oldPitch

                const mySecondInterval = setInterval(function () {
                    attitude.setPitch(i)
                    i--
                    if (i <= pitch) {
                        clearInterval(mySecondInterval)
                    }

                }, 1)

                oldPitch = pitch;

            }


        }

        function setSlipEmbedd(accX) {
            // range di input di accX
            a1 = -0.20
            a2 = 0.20
            // range di output della pallina
            b1 = 0
            b2 = 1
            // normalizzazione
            if (accX < a1) accX = a1
            else if (accX > a2) accX = a2

            //slip = (accX - (-1)) * (1 - 0) / (1 - (-1)) + 0
            
            slip = b1 + ((accX - a1)* (b2 - b1) / (a2 - a1))
            
            //alert("Slip: " +accX+"  "+slip)
            

            turn_coordinator.setSlip(slip)

        }

        function setTurnEmbedd(deg) {

            // deg = rad * 180 / Math.PI 
            if (deg < -3) deg = -3
            else if (deg > 3) deg = 3
            turn = (deg - (-3)) * (30 - (-30)) / (3 - (-3)) + (-30)
       //     alert("Turn(rad): " +rad+"  "+turn)
            turn_coordinator.setTurn(turn)

        }




    </script>

</body>

</html>